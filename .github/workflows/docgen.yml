# This is a basic workflow to help you get started with Actions

name: Generate Docs

# Controls when the action will run. Triggers the workflow on push or pull request
# events but only for the master branch
on:
  push:
    branches: [ master ]

jobs:
  build-docs:
    runs-on: ubuntu-20.04
    container:
      image: ghcr.io/pytorch/tensorrt/docgen:latest
      credentials:
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}
    steps:
      - name: Reclaim space
        run: |
          rm -rf /usr/share/dotnet
          rm -rf /opt/ghc
          rm -rf "/usr/local/share/boost"
          rm -rf /usr/local/cuda/cuda-*
      - name: Install base deps
        run: |
          apt update
          apt install -y gcc git curl wget make zlib1g-dev bzip2 libbz2-dev lzma lzma-dev libreadline-dev libsqlite3-dev libssl-dev libffi-dev doxygen pandoc
      - name: Install Python
        run: |
          mkdir -p /opt/circleci
          git clone https://github.com/pyenv/pyenv.git /opt/circleci/.pyenv
          export PYENV_ROOT="/opt/circleci/.pyenv"
          export PATH="$PYENV_ROOT/shims:$PYENV_ROOT/bin:$PATH"
          pyenv install 3.9.4
          pyenv global 3.9.4
          python3 -m pip install --upgrade pip
          python3 -m pip install wheel
      - uses: actions/checkout@v2
        with:
          ref: ${{github.head_ref}}
      - name: Get HEAD SHA
        id: vars
        run: echo "::set-output name=sha::$(git rev-parse --short HEAD)"
      - name: Get Bazel version
        id: bazel_info
        run: echo "::set-output name=version::$(cat .bazelversion)"
      - name: Install Bazel
        run: |
          wget -q https://github.com/bazelbuild/bazel/releases/download/${{ steps.bazel_info.outputs.version }}/bazel-${{ steps.bazel_info.outputs.version }}-linux-x86_64 -O /usr/bin/bazel
          chmod a+x /usr/bin/bazel
      - name: Install cudnn + tensorrt
        run: |
          wget https://developer.download.nvidia.com/compute/cuda/repos/ubuntu2004/x86_64/cuda-ubuntu2004.pin
          mv cuda-ubuntu2004.pin /etc/apt/preferences.d/cuda-repository-pin-600
          apt-key adv --fetch-keys https://developer.download.nvidia.com/compute/cuda/repos/ubuntu2004/x86_64/7fa2af80.pub
          apt-key adv --keyserver keyserver.ubuntu.com --recv-keys 536F8F1DE80F6A35
          apt-key adv --keyserver keyserver.ubuntu.com --recv-keys A4B469963BF863CC
          add-apt-repository "deb https://developer.download.nvidia.com/compute/cuda/repos/ubuntu2004/x86_64/ /"
          apt-get update
          apt-get install -y libcudnn8 libcudnn8-dev

          apt-key adv --fetch-keys https://developer.download.nvidia.com/compute/cuda/repos/ubuntu2004/x86_64/3bf863cc.pub
          add-apt-repository "deb https://developer.download.nvidia.com/compute/cuda/repos/ubuntu2004/x86_64/ /"
          apt-get update

          apt-get install -y libnvinfer8 libnvinfer-plugin8 libnvinfer-dev libnvinfer-plugin-dev
      - name: Install Torch
        run: |
          python3 -m pip install -r py/requirements.txt
      - name: Build Python Package
        run: |
          cp toolchains/ci_workspaces/WORKSPACE.x86_64 WORKSPACE
          cd py
          pip install -e .
          cd ..
      - name: Generate New Docs
        run: |
          cd docsrc
          python3 -m pip install -r requirements.txt
          python3 -c "import torch_tensorrt; print(torch_tensorrt.__version__)"
          make html
          cd ..
      - uses: stefanzweifel/git-auto-commit-action@v4
        with:
        # Required
          commit_message: "docs: [Automated] Regenerating documenation for ${{ steps.vars.outputs.sha }}"
          commit_options: "--no-verify --signoff"
          file_pattern: docs/
          commit_user_name: Torch-TensorRT Github Bot
          commit_user_email: torch-tensorrt.github.bot@nvidia.com
          commit_author: Torch-TensorRT Github Bot <torch-tensorrt.github.bot@nvidia.com>
